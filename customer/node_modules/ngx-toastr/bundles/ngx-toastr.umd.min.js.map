{
  "version": 3,
  "file": "ngx-toastr.umd.min.js",
  "sources": [
    "ng://ngx-toastr/src/lib/portal/portal.ts",
    "ng://ngx-toastr/src/lib/portal/dom-portal-host.ts",
    "ng://ngx-toastr/src/lib/overlay/overlay-ref.ts",
    "ng://ngx-toastr/src/lib/overlay/overlay-container.ts",
    "ng://ngx-toastr/src/lib/overlay/overlay.ts",
    "ng://ngx-toastr/src/lib/toastr/toast.directive.ts",
    "ng://ngx-toastr/src/lib/toastr/toastr-config.ts",
    "ng://ngx-toastr/src/lib/toastr/toast-injector.ts",
    "ng://ngx-toastr/src/lib/toastr/toast-token.ts",
    "ng://ngx-toastr/src/lib/toastr/toastr.service.ts",
    "ng://ngx-toastr/src/lib/toastr/toast.component.ts",
    "ng://ngx-toastr/src/lib/toastr/default-config.ts",
    "ng://ngx-toastr/src/lib/toastr/toastr.module.ts",
    "ng://ngx-toastr/src/lib/toastr/toast-noanimation.component.ts"
  ],
  "sourcesContent": [
    "import {\n  ComponentRef,\n  Injector,\n  ViewContainerRef\n} from '@angular/core';\n\nexport interface ComponentType<T> {\n  new (...args: any[]): T;\n}\n\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> {\n  private _attachedHost?: BasePortalHost;\n  /** The type of the component that will be instantiated for attachment. */\n  component: ComponentType<T>;\n\n  /**\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalHost.\n   * The origin necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef: ViewContainerRef;\n\n  /** Injector used for the instantiation of the component. */\n  injector: Injector;\n\n  constructor(component: ComponentType<T>, injector: Injector) {\n    this.component = component;\n    this.injector = injector;\n  }\n\n  /** Attach this portal to a host. */\n  attach(host: BasePortalHost, newestOnTop: boolean) {\n    this._attachedHost = host;\n    return host.attach(this, newestOnTop);\n  }\n\n  /** Detach this portal from its host */\n  detach() {\n    const host = this._attachedHost;\n    if (host) {\n      this._attachedHost = undefined;\n      return host.detach();\n    }\n  }\n\n  /** Whether this portal is attached to a host. */\n  get isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n\n  /**\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\n   * the PortalHost when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host?: BasePortalHost) {\n    this._attachedHost = host;\n  }\n}\n\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nexport abstract class BasePortalHost {\n  /** The portal currently attached to the host. */\n  private _attachedPortal?: ComponentPortal<any>;\n\n  /** A function that will permanently dispose this host. */\n  private _disposeFn?: () => void;\n\n  attach(portal: ComponentPortal<any>, newestOnTop: boolean) {\n    this._attachedPortal = portal;\n    return this.attachComponentPortal(portal, newestOnTop);\n  }\n\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>, newestOnTop: boolean): ComponentRef<T>;\n\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost();\n    }\n\n    this._attachedPortal = undefined;\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = undefined;\n    }\n  }\n\n  setDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n}\n",
    "import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n} from '@angular/core';\nimport { BasePortalHost, ComponentPortal } from './portal';\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n  constructor(\n    private _hostDomElement: Element,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n  ) {\n    super();\n  }\n\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   */\n  attachComponentPortal<T>(\n    portal: ComponentPortal<T>,\n    newestOnTop: boolean,\n  ): ComponentRef<T> {\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(\n      portal.component,\n    );\n    let componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the ChangeDetector for that component to the application (which\n    // happens automatically when using a ViewContainer).\n    componentRef = componentFactory.create(portal.injector);\n\n    // When creating a component outside of a ViewContainer, we need to manually register\n    // its ChangeDetector with the application. This API is unfortunately not yet published\n    // in Angular core. The change detector must also be deregistered when the component\n    // is destroyed to prevent memory leaks.\n    this._appRef.attachView(componentRef.hostView);\n\n    this.setDisposeFn(() => {\n      this._appRef.detachView(componentRef.hostView);\n      componentRef.destroy();\n    });\n\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    if (newestOnTop) {\n      this._hostDomElement.insertBefore(\n        this._getComponentRootNode(componentRef),\n        this._hostDomElement.firstChild,\n      );\n    } else {\n      this._hostDomElement.appendChild(\n        this._getComponentRootNode(componentRef),\n      );\n    }\n\n    return componentRef;\n  }\n\n  /** Gets the root HTMLElement for an instantiated component. */\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n  }\n}\n",
    "import { ComponentRef } from '@angular/core';\nimport { BasePortalHost, ComponentPortal } from '../portal/portal';\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef {\n  constructor(private _portalHost: BasePortalHost) {}\n\n  attach(\n    portal: ComponentPortal<any>,\n    newestOnTop: boolean = true,\n  ): ComponentRef<any> {\n    return this._portalHost.attach(portal, newestOnTop);\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns Resolves when the overlay has been detached.\n   */\n  detach() {\n    return this._portalHost.detach();\n  }\n}\n",
    "/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nexport class OverlayContainer {\n  private _containerElement: HTMLElement;\n\n  /**\n   * This method returns the overlay container element.  It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  private _createContainer(): void {\n    const container = document.createElement('div');\n    container.classList.add('overlay-container');\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n",
    "import { ApplicationRef, ComponentFactoryResolver, Injectable } from '@angular/core';\nimport { DomPortalHost } from '../portal/dom-portal-host';\nimport { OverlayRef } from './overlay-ref';\n\nimport { ToastContainerDirective } from '../toastr/toast.directive';\nimport { OverlayContainer } from './overlay-container';\n\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\n @Injectable()\n  export class Overlay {\n    private _paneElements: {string?: HTMLElement} = {};\n    constructor(private _overlayContainer: OverlayContainer,\n                private _componentFactoryResolver: ComponentFactoryResolver,\n                private _appRef: ApplicationRef) {}\n  /**\n   * Creates an overlay.\n   * @returns A reference to the created overlay.\n   */\n  create(positionClass?: string, overlayContainer?: ToastContainerDirective): OverlayRef {\n    // get existing pane if possible\n    return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n  }\n\n  getPaneElement(positionClass: string = '', overlayContainer?: ToastContainerDirective): HTMLElement {\n    if (!this._paneElements[positionClass]) {\n      this._paneElements[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n    }\n    return this._paneElements[positionClass];\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(positionClass: string, overlayContainer?: ToastContainerDirective): HTMLElement {\n    const pane = document.createElement('div');\n    pane.id = 'toast-container';\n    pane.classList.add(positionClass);\n    pane.classList.add('toast-container');\n\n    if (!overlayContainer) {\n      this._overlayContainer.getContainerElement().appendChild(pane);\n    } else {\n      overlayContainer.getContainerElement().appendChild(pane);\n    }\n    return pane;\n  }\n\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n  private _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n  }\n\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   */\n  private _createOverlayRef(pane: HTMLElement): OverlayRef {\n    return new OverlayRef(this._createPortalHost(pane));\n  }\n}\n\n\n/** Providers for Overlay and its related injectables. */\nexport const OVERLAY_PROVIDERS = [\n  Overlay,\n  OverlayContainer,\n];\n",
    "import {\n  Directive,\n  ElementRef,\n  NgModule,\n} from '@angular/core';\n\n@Directive({\n  selector: '[toastContainer]',\n  exportAs: 'toastContainer',\n})\nexport class ToastContainerDirective {\n  constructor(private el: ElementRef) { }\n  getContainerElement(): HTMLElement {\n    return this.el.nativeElement;\n  }\n}\n\n@NgModule({\n  declarations: [ToastContainerDirective],\n  exports: [ToastContainerDirective],\n})\nexport class ToastContainerModule {}\n",
    "import { SafeHtml } from '@angular/platform-browser';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport { ComponentType } from '../portal/portal';\nimport { ToastRef } from './toast-injector';\n\n/**\n * Configuration for an individual toast.\n */\n export interface IndividualConfig {\n  /**\n   * disable both timeOut and extendedTimeOut\n   * default: false\n   */\n  disableTimeOut: boolean;\n  /**\n  * toast time to live in milliseconds\n  * default: 5000\n  */\n  timeOut: number;\n  /**\n  * toast show close button\n  * default: false\n  */\n  closeButton: boolean;\n  /**\n  * time to close after a user hovers over toast\n  * default: 1000\n   */\n  extendedTimeOut: number;\n  /**\n   * show toast progress bar\n   * default: false\n   */\n  progressBar: boolean;\n\n  /**\n   * changes toast progress bar animation\n   * default: decreasing\n   */\n  progressAnimation?: 'increasing' | 'decreasing';\n  /**\n   * render html in toast message (possibly unsafe)\n   * default: false\n   */\n  enableHtml: boolean;\n  /**\n   * css class on toast component\n   * default: toast\n   */\n  toastClass: string;\n  /**\n   * css class on toast container\n   * default: toast-top-right\n   */\n  positionClass: string;\n  /**\n   * css class on to toast title\n   * default: toast-title\n   */\n  titleClass: string;\n  /**\n   * css class on to toast title\n   * default: toast-title\n   */\n  messageClass: string;\n  /**\n   * animation easing on toast\n   * default: ease-in\n   */\n  easing: string;\n  /**\n   * animation ease time on toast\n   * default: 300\n   */\n  easeTime: string | number;\n  /**\n   * clicking on toast dismisses it\n   * default: true\n   */\n  tapToDismiss: boolean;\n  /**\n   * Angular toast component to be shown\n   * default: Toast\n   */\n  toastComponent: ComponentType<any>;\n  /**\n   * Helps show toast from a websocket or from event outside Angular\n   * default: false\n   */\n  onActivateTick: boolean;\n}\n\nexport interface ToastrIconClasses {\n  error: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\n/**\n * Global Toast configuration\n * Includes all IndividualConfig\n */\nexport interface GlobalConfig extends IndividualConfig {\n  /**\n   * max toasts opened. Toasts will be queued\n   * Zero is unlimited\n   * default: 0\n   */\n  maxOpened: number;\n  /**\n   * dismiss current toast when max is reached\n   * default: false\n   */\n  autoDismiss: boolean;\n  iconClasses: Partial<ToastrIconClasses>;\n  /**\n   * New toast placement\n   * default: true\n   */\n  newestOnTop: boolean;\n  /**\n   * block duplicate messages\n   * default: false\n   */\n  preventDuplicates: boolean;\n}\n\n/**\n * Everything a toast needs to launch\n */\nexport class ToastPackage {\n  private _onTap = new Subject<any>();\n  private _onAction = new Subject<any>();\n\n  constructor(\n    public toastId: number,\n    public config: IndividualConfig,\n    public message: string | SafeHtml | null | undefined,\n    public title: string | undefined,\n    public toastType: string,\n    public toastRef: ToastRef<any>,\n  ) {\n    this.toastRef.afterClosed().subscribe(() => {\n      this._onAction.complete();\n      this._onTap.complete();\n    });\n  }\n\n  /** Fired on click */\n  triggerTap() {\n    this._onTap.next();\n    this._onTap.complete();\n  }\n\n  onTap(): Observable<any> {\n    return this._onTap.asObservable();\n  }\n\n  /** available for use in custom toast */\n  triggerAction(action?: any) {\n    this._onAction.next(action);\n  }\n\n  onAction(): Observable<any> {\n    return this._onAction.asObservable();\n  }\n}\n\n/* tslint:disable:no-empty-interface */\nexport interface GlobalToastrConfig extends GlobalConfig {}\nexport interface IndividualToastrConfig extends IndividualConfig {}\nexport interface ToastrConfig extends IndividualConfig {}\n",
    "import { Injector } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\nimport { OverlayRef } from '../overlay/overlay-ref';\nimport { ToastPackage } from './toastr-config';\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nexport class ToastRef<T> {\n  /** The instance of component opened into the toast. */\n  componentInstance: T;\n\n  /** Subject for notifying the user that the toast has finished closing. */\n  private _afterClosed = new Subject<any>();\n  /** triggered when toast is activated */\n  private _activate = new Subject<any>();\n  /** notifies the toast that it should close before the timeout */\n  private _manualClose = new Subject<any>();\n\n  constructor(private _overlayRef: OverlayRef) { }\n\n  manualClose() {\n    this._manualClose.next();\n    this._manualClose.complete();\n  }\n\n  manualClosed(): Observable<any> {\n    return this._manualClose.asObservable();\n  }\n\n  /**\n   * Close the toast.\n   */\n  close(): void {\n    this._overlayRef.detach();\n    this._afterClosed.next();\n    this._afterClosed.complete();\n    this._manualClose.complete();\n    this._activate.complete();\n  }\n\n  /** Gets an observable that is notified when the toast is finished closing. */\n  afterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n\n  isInactive() {\n    return this._activate.isStopped;\n  }\n\n  activate() {\n    this._activate.next();\n    this._activate.complete();\n  }\n\n  /** Gets an observable that is notified when the toast has started opening. */\n  afterActivate(): Observable<any> {\n    return this._activate.asObservable();\n  }\n}\n\n\n/** Custom injector type specifically for instantiating components with a toast. */\nexport class ToastInjector implements Injector {\n  constructor(\n    private _toastPackage: ToastPackage,\n    private _parentInjector: Injector) { }\n\n  get(token: any, notFoundValue?: any): any {\n    if (token === ToastPackage && this._toastPackage) {\n      return this._toastPackage;\n    }\n    return this._parentInjector.get(token, notFoundValue);\n  }\n}\n",
    "import { InjectionToken } from '@angular/core';\n\nimport { GlobalConfig } from './toastr-config';\n\nexport interface ToastToken {\n  config: GlobalConfig;\n  defaults: any;\n}\n\nexport const TOAST_CONFIG = new InjectionToken<ToastToken>('ToastConfig');\n",
    "import {\n  ComponentRef,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone,\n  SecurityContext\n} from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\nimport { Observable } from 'rxjs';\n\nimport { Overlay } from '../overlay/overlay';\nimport { ComponentPortal } from '../portal/portal';\nimport { ToastInjector, ToastRef } from './toast-injector';\nimport { ToastToken, TOAST_CONFIG } from './toast-token';\nimport { ToastContainerDirective } from './toast.directive';\nimport {\n  GlobalConfig,\n  IndividualConfig,\n  ToastPackage,\n} from './toastr-config';\n\n\nexport interface ActiveToast<C> {\n  /** Your Toast ID. Use this to close it individually */\n  toastId: number;\n  /** the message of your toast. Stored to prevent duplicates */\n  message: string;\n  /** a reference to the component see portal.ts */\n  portal: ComponentRef<C>;\n  /** a reference to your toast */\n  toastRef: ToastRef<C>;\n  /** triggered when toast is active */\n  onShown: Observable<any>;\n  /** triggered when toast is destroyed */\n  onHidden: Observable<any>;\n  /** triggered on toast click */\n  onTap: Observable<any>;\n  /** available for your use in custom toast */\n  onAction: Observable<any>;\n}\n\n@Injectable()\nexport class ToastrService {\n  toastrConfig: GlobalConfig;\n  currentlyActive = 0;\n  toasts: ActiveToast<any>[] = [];\n  overlayContainer: ToastContainerDirective;\n  previousToastMessage: string | undefined;\n  private index = 0;\n\n  constructor(\n    @Inject(TOAST_CONFIG) token: ToastToken,\n    private overlay: Overlay,\n    private _injector: Injector,\n    private sanitizer: DomSanitizer,\n    private ngZone: NgZone\n  ) {\n    const defaultConfig = new token.defaults;\n    this.toastrConfig = { ...defaultConfig, ...token.config };\n    this.toastrConfig.iconClasses = {\n      ...defaultConfig.iconClasses,\n      ...token.config.iconClasses,\n    };\n  }\n  /** show toast */\n  show(message?: string, title?: string, override: Partial<IndividualConfig> = {}, type = '') {\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show successful toast */\n  success(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const type = this.toastrConfig.iconClasses.success || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show error toast */\n  error(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const type = this.toastrConfig.iconClasses.error || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show info toast */\n  info(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const type = this.toastrConfig.iconClasses.info || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show warning toast */\n  warning(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const type = this.toastrConfig.iconClasses.warning || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /**\n   * Remove all or a single toast by id\n   */\n  clear(toastId?: number) {\n    // Call every toastRef manualClose function\n    for (const toast of this.toasts) {\n      if (toastId !== undefined) {\n        if (toast.toastId === toastId) {\n          toast.toastRef.manualClose();\n          return;\n        }\n      } else {\n        toast.toastRef.manualClose();\n      }\n    }\n  }\n  /**\n   * Remove and destroy a single toast by id\n   */\n  remove(toastId: number) {\n    const found = this._findToast(toastId);\n    if (!found) {\n      return false;\n    }\n    found.activeToast.toastRef.close();\n    this.toasts.splice(found.index, 1);\n    this.currentlyActive = this.currentlyActive - 1;\n    if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n      return false;\n    }\n    if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n      const p = this.toasts[this.currentlyActive].toastRef;\n      if (!p.isInactive()) {\n        this.currentlyActive = this.currentlyActive + 1;\n        p.activate();\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines if toast message is already shown\n   */\n  isDuplicate(message: string) {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].message === message) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** create a clone of global config and apply individual settings */\n  private applyConfig(override: Partial<IndividualConfig> = {}): GlobalConfig {\n    return { ...this.toastrConfig, ...override };\n  }\n\n  /**\n   * Find toast object by id\n   */\n  private _findToast(toastId: number): { index: number, activeToast: ActiveToast<any> } | null {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].toastId === toastId) {\n        return { index: i, activeToast: this.toasts[i] };\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Determines the need to run inside angular's zone then builds the toast\n   */\n  private _preBuildNotification(\n    toastType: string,\n    message: string | undefined,\n    title: string | undefined,\n    config: GlobalConfig,\n  ): ActiveToast<any> | null {\n    if (config.onActivateTick) {\n      return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n    }\n    return this._buildNotification(toastType, message, title, config);\n  }\n\n  /**\n   * Creates and attaches toast data to component\n   * returns null if toast is duplicate and preventDuplicates == True\n   */\n  private _buildNotification(\n    toastType: string,\n    message: string | undefined,\n    title: string | undefined,\n    config: GlobalConfig,\n  ): ActiveToast<any> | null {\n    if (!config.toastComponent) {\n      throw new Error('toastComponent required');\n    }\n    // max opened and auto dismiss = true\n    if (message && this.toastrConfig.preventDuplicates && this.isDuplicate(message)) {\n      return null;\n    }\n    this.previousToastMessage = message;\n    let keepInactive = false;\n    if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n      keepInactive = true;\n      if (this.toastrConfig.autoDismiss) {\n        this.clear(this.toasts[this.toasts.length - 1].toastId);\n      }\n    }\n    const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n    this.index = this.index + 1;\n    let sanitizedMessage: string | SafeHtml | undefined | null = message;\n    if (message && config.enableHtml) {\n      sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n    }\n    const toastRef = new ToastRef(overlayRef);\n    const toastPackage = new ToastPackage(\n      this.index,\n      config,\n      sanitizedMessage,\n      title,\n      toastType,\n      toastRef,\n    );\n    const toastInjector = new ToastInjector(toastPackage, this._injector);\n    const component = new ComponentPortal(config.toastComponent, toastInjector);\n    const portal = overlayRef.attach(component, this.toastrConfig.newestOnTop);\n    toastRef.componentInstance = (<any>portal)._component;\n    const ins: ActiveToast<any> = {\n      toastId: this.index,\n      message: message || '',\n      toastRef,\n      onShown: toastRef.afterActivate(),\n      onHidden: toastRef.afterClosed(),\n      onTap: toastPackage.onTap(),\n      onAction: toastPackage.onAction(),\n      portal,\n    };\n\n    if (!keepInactive) {\n      setTimeout(() => {\n        ins.toastRef.activate();\n        this.currentlyActive = this.currentlyActive + 1;\n      });\n    }\n\n    this.toasts.push(ins);\n    return ins;\n  }\n}\n",
    "import {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\nimport {\n  Component,\n  HostBinding,\n  HostListener,\n  NgZone,\n  OnDestroy,\n} from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\n\nimport { Subscription } from 'rxjs';\n\nimport { IndividualConfig, ToastPackage } from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n  selector: '[toast-component]',\n  template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }}\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n  animations: [\n    trigger('flyInOut', [\n      state('inactive', style({\n        display: 'none',\n        opacity: 0,\n      })),\n      state('active', style({})),\n      state('removed', style({ opacity: 0 })),\n      transition('inactive => active',\n        animate('{{ easeTime }}ms {{ easing }}')\n      ),\n      transition('active => removed',\n        animate('{{ easeTime }}ms {{ easing }}'),\n      ),\n    ]),\n  ],\n  preserveWhitespaces: false,\n})\nexport class Toast implements OnDestroy {\n  message?: string | SafeHtml | null;\n  title?: string;\n  options: IndividualConfig;\n  /** width of progress bar */\n  width = -1;\n  /** a combination of toast type and options.toastClass */\n  @HostBinding('class') toastClasses = '';\n  /** controls animation */\n  @HostBinding('@flyInOut') state = {\n    value: 'inactive',\n    params: {\n      easeTime: this.toastPackage.config.easeTime,\n      easing: 'ease-in',\n    },\n  };\n  private timeout: any;\n  private intervalId: any;\n  private hideTime: number;\n  private sub: Subscription;\n  private sub1: Subscription;\n\n  constructor(\n    protected toastrService: ToastrService,\n    public toastPackage: ToastPackage,\n    protected ngZone?: NgZone,\n  ) {\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n  activateToast() {\n    this.state = { ...this.state, value: 'active' };\n    if (!this.options.disableTimeOut && this.options.timeOut) {\n      this.outsideTimeout(() => this.remove(), this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n      if (this.options.progressBar) {\n        this.outsideInterval(() => this.updateProgress(), 10);\n      }\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = (remaining / this.options.timeOut) * 100;\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n  remove() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.state = {...this.state, value: 'removed'};\n    this.outsideTimeout(() =>\n        this.toastrService.remove(this.toastPackage.toastId),\n        +this.toastPackage.config.easeTime,\n      );\n  }\n  @HostListener('click')\n  tapToast() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    this.toastPackage.triggerTap();\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n  @HostListener('mouseenter')\n  stickAround() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0;\n\n    // disable progressBar\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n  @HostListener('mouseleave')\n  delayedHideToast() {\n    if (this.options.disableTimeOut\n      || this.options.extendedTimeOut === 0\n      || this.state.value === 'removed') {\n      return;\n    }\n    this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  outsideTimeout(func: Function, timeout: number) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(() =>\n        this.timeout = setTimeout(() => this.runInsideAngular(func), timeout)\n      );\n    } else {\n      this.timeout = setTimeout(() => func(), timeout);\n    }\n  }\n\n  outsideInterval(func: Function, timeout: number) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(() =>\n        this.intervalId = setInterval(() => this.runInsideAngular(func), timeout)\n      );\n    } else {\n      this.intervalId = setInterval(() => func(), timeout);\n    }\n  }\n\n  private runInsideAngular(func: Function) {\n    if (this.ngZone) {\n      this.ngZone.run(() => func());\n    } else {\n      func();\n    }\n  }\n\n}\n",
    "import { Toast } from './toast.component';\nimport { GlobalConfig } from './toastr-config';\n\nexport class DefaultGlobalConfig implements GlobalConfig {\n  // Global\n  maxOpened = 0;\n  autoDismiss = false;\n  newestOnTop = true;\n  preventDuplicates = false;\n  iconClasses = {\n    error: 'toast-error',\n    info: 'toast-info',\n    success: 'toast-success',\n    warning: 'toast-warning',\n  };\n\n  // Individual\n  toastComponent = Toast;\n  closeButton = false;\n  disableTimeOut: false;\n  timeOut = 5000;\n  extendedTimeOut = 1000;\n  enableHtml = false;\n  progressBar = false;\n  toastClass = 'toast';\n  positionClass = 'toast-top-right';\n  titleClass = 'toast-title';\n  messageClass = 'toast-message';\n  easing = 'ease-in';\n  easeTime = 300;\n  tapToDismiss = true;\n  onActivateTick = false;\n  progressAnimation: 'decreasing' | 'increasing' = 'decreasing';\n}\n",
    "import { CommonModule } from '@angular/common';\nimport {\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\n\nimport { Overlay } from '../overlay/overlay';\nimport { OverlayContainer } from '../overlay/overlay-container';\nimport { DefaultGlobalConfig } from './default-config';\nimport { TOAST_CONFIG } from './toast-token';\nimport { Toast } from './toast.component';\nimport { GlobalConfig } from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [Toast],\n  declarations: [Toast],\n  entryComponents: [Toast],\n})\nexport class ToastrModule {\n  constructor(@Optional() @SkipSelf() parentModule: ToastrModule) {\n    if (parentModule) {\n      throw new Error('ToastrModule is already loaded. It should only be imported in your application\\'s main module.');\n    }\n  }\n  static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders {\n    return {\n      ngModule: ToastrModule,\n      providers: [\n        { provide: TOAST_CONFIG, useValue: { config, defaults: DefaultGlobalConfig } },\n        OverlayContainer,\n        Overlay,\n        ToastrService,\n      ],\n    };\n  }\n}\n",
    "import { CommonModule } from '@angular/common';\r\nimport {\r\n  ApplicationRef,\r\n  Component,\r\n  HostBinding,\r\n  HostListener,\r\n  NgModule,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { IndividualConfig, ToastPackage } from './toastr-config';\r\nimport { ToastrService } from './toastr.service';\r\n\r\n@Component({\r\n  selector: '[toast-component]',\r\n  template: `\r\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\r\n    {{ title }}\r\n  </div>\r\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\" aria-live=\"polite\"\r\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\r\n  </div>\r\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\" aria-live=\"polite\"\r\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\r\n    {{ message }}\r\n  </div>\r\n  <div *ngIf=\"options.progressBar\">\r\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\r\n  </div>\r\n  `,\r\n})\r\nexport class ToastNoAnimation implements OnDestroy {\r\n  message?: string | SafeHtml | null;\r\n  title?: string;\r\n  options: IndividualConfig;\r\n  /** width of progress bar */\r\n  width = -1;\r\n  /** a combination of toast type and options.toastClass */\r\n  @HostBinding('class') toastClasses = '';\r\n\r\n  @HostBinding('style.display')\r\n  get displayStyle() {\r\n    if (this.state === 'inactive') {\r\n      return 'none';\r\n    }\r\n    return 'inherit';\r\n  }\r\n\r\n  /** controls animation */\r\n  state = 'inactive';\r\n  private timeout: any;\r\n  private intervalId: any;\r\n  private hideTime: number;\r\n  private sub: Subscription;\r\n  private sub1: Subscription;\r\n\r\n  constructor(\r\n    protected toastrService: ToastrService,\r\n    public toastPackage: ToastPackage,\r\n    protected appRef: ApplicationRef,\r\n  ) {\r\n    this.message = toastPackage.message;\r\n    this.title = toastPackage.title;\r\n    this.options = toastPackage.config;\r\n    this.toastClasses = `${toastPackage.toastType} ${\r\n      toastPackage.config.toastClass\r\n    }`;\r\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\r\n      this.activateToast();\r\n    });\r\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\r\n      this.remove();\r\n    });\r\n  }\r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe();\r\n    this.sub1.unsubscribe();\r\n    clearInterval(this.intervalId);\r\n    clearTimeout(this.timeout);\r\n  }\r\n  /**\r\n   * activates toast and sets timeout\r\n   */\r\n  activateToast() {\r\n    this.state = 'active';\r\n    if (!this.options.disableTimeOut && this.options.timeOut) {\r\n      this.timeout = setTimeout(() => {\r\n        this.remove();\r\n      }, this.options.timeOut);\r\n      this.hideTime = new Date().getTime() + this.options.timeOut;\r\n      if (this.options.progressBar) {\r\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\r\n      }\r\n    }\r\n    if (this.options.onActivateTick) {\r\n      this.appRef.tick();\r\n    }\r\n  }\r\n  /**\r\n   * updates progress bar width\r\n   */\r\n  updateProgress() {\r\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\r\n      return;\r\n    }\r\n    const now = new Date().getTime();\r\n    const remaining = this.hideTime - now;\r\n    this.width = remaining / this.options.timeOut * 100;\r\n    if (this.options.progressAnimation === 'increasing') {\r\n      this.width = 100 - this.width;\r\n    }\r\n    if (this.width <= 0) {\r\n      this.width = 0;\r\n    }\r\n    if (this.width >= 100) {\r\n      this.width = 100;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * tells toastrService to remove this toast after animation time\r\n   */\r\n  remove() {\r\n    if (this.state === 'removed') {\r\n      return;\r\n    }\r\n    clearTimeout(this.timeout);\r\n    this.state = 'removed';\r\n    this.timeout = setTimeout(\r\n      () => this.toastrService.remove(this.toastPackage.toastId),\r\n    );\r\n  }\r\n  @HostListener('click')\r\n  tapToast() {\r\n    if (this.state === 'removed') {\r\n      return;\r\n    }\r\n    this.toastPackage.triggerTap();\r\n    if (this.options.tapToDismiss) {\r\n      this.remove();\r\n    }\r\n  }\r\n  @HostListener('mouseenter')\r\n  stickAround() {\r\n    if (this.state === 'removed') {\r\n      return;\r\n    }\r\n    clearTimeout(this.timeout);\r\n    this.options.timeOut = 0;\r\n    this.hideTime = 0;\r\n\r\n    // disable progressBar\r\n    clearInterval(this.intervalId);\r\n    this.width = 0;\r\n  }\r\n  @HostListener('mouseleave')\r\n  delayedHideToast() {\r\n    if (this.options.disableTimeOut\r\n      || this.options.extendedTimeOut === 0\r\n      || this.state === 'removed') {\r\n      return;\r\n    }\r\n    this.timeout = setTimeout(\r\n      () => this.remove(),\r\n      this.options.extendedTimeOut,\r\n    );\r\n    this.options.timeOut = this.options.extendedTimeOut;\r\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\r\n    this.width = -1;\r\n    if (this.options.progressBar) {\r\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\r\n    }\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [ToastNoAnimation],\r\n  exports: [ToastNoAnimation],\r\n  entryComponents: [ToastNoAnimation],\r\n})\r\nexport class ToastNoAnimationModule {}\r\n"
  ],
  "names": [
    "ComponentPortal",
    "component",
    "injector",
    "this",
    "prototype",
    "attach",
    "host",
    "newestOnTop",
    "_attachedHost",
    "detach",
    "undefined",
    "get",
    "BasePortalHost",
    "portal",
    "_attachedPortal",
    "attachComponentPortal",
    "_disposeFn",
    "DomPortalHost",
    "_hostDomElement",
    "_componentFactoryResolver",
    "_appRef",
    "_this",
    "_super",
    "call",
    "attachView",
    "componentRef",
    "hostView",
    "destroy",
    "insertBefore",
    "_getComponentRootNode",
    "firstChild",
    "OverlayRef",
    "_portalHost",
    "OverlayContainer",
    "getContainerElement",
    "_containerElement",
    "_createContainer",
    "container",
    "document",
    "createElement",
    "classList",
    "add",
    "Overlay",
    "_overlayContainer",
    "_paneElements",
    "create",
    "positionClass",
    "overlayContainer",
    "_createOverlayRef",
    "getPaneElement",
    "_createPaneElement",
    "pane",
    "id",
    "appendChild",
    "_createPortalHost",
    "ctorParameters",
    "OVERLAY_PROVIDERS",
    "ToastContainerDirective",
    "el",
    "nativeElement",
    "decorators",
    "type",
    "Directive",
    "args",
    "selector",
    "ToastPackage",
    "toastId",
    "config",
    "message",
    "title",
    "toastType",
    "toastRef",
    "_onTap",
    "Subject",
    "_onAction",
    "afterClosed",
    "subscribe",
    "complete",
    "triggerTap",
    "next",
    "onTap",
    "asObservable",
    "triggerAction",
    "action",
    "onAction",
    "ToastRef",
    "_overlayRef",
    "_afterClosed",
    "_activate",
    "_manualClose",
    "manualClose",
    "manualClosed",
    "close",
    "isInactive",
    "isStopped",
    "activate",
    "afterActivate",
    "ToastInjector",
    "_toastPackage",
    "_parentInjector",
    "token",
    "notFoundValue",
    "TOAST_CONFIG",
    "InjectionToken",
    "ToastrService",
    "overlay",
    "_injector",
    "sanitizer",
    "ngZone",
    "currentlyActive",
    "toasts",
    "index",
    "defaultConfig",
    "defaults",
    "toastrConfig",
    "Object",
    "assign",
    "iconClasses",
    "show",
    "override",
    "success",
    "_preBuildNotification",
    "applyConfig",
    "clear",
    "_a",
    "tslib_1.__values",
    "_b",
    "done",
    "toast",
    "value",
    "e_1_1",
    "e_1",
    "error",
    "_c",
    "return",
    "remove",
    "found",
    "_findToast",
    "maxOpened",
    "length",
    "p",
    "i",
    "onActivateTick",
    "run",
    "_buildNotification",
    "toastComponent",
    "Error",
    "preventDuplicates",
    "isDuplicate",
    "previousToastMessage",
    "keepInactive",
    "autoDismiss",
    "overlayRef",
    "sanitizedMessage",
    "enableHtml",
    "sanitize",
    "SecurityContext",
    "HTML",
    "toastPackage",
    "toastInjector",
    "ins",
    "onShown",
    "onHidden",
    "Toast",
    "toastrService",
    "state",
    "params",
    "easeTime",
    "easing",
    "options",
    "toastClasses",
    "toastClass",
    "sub",
    "activateToast",
    "sub1",
    "ngOnDestroy",
    "unsubscribe",
    "clearInterval",
    "intervalId",
    "clearTimeout",
    "timeout",
    "disableTimeOut",
    "timeOut",
    "outsideTimeout",
    "hideTime",
    "Date",
    "getTime",
    "progressBar",
    "outsideInterval",
    "updateProgress",
    "width",
    "now",
    "remaining",
    "progressAnimation",
    "tapToast",
    "stickAround",
    "delayedHideToast",
    "extendedTimeOut",
    "func",
    "runOutsideAngular",
    "setTimeout",
    "runInsideAngular",
    "transition",
    "animate",
    "preserveWhitespaces",
    "NgZone",
    "propDecorators",
    "HostBinding",
    "HostListener",
    "DefaultGlobalConfig",
    "info",
    "warning",
    "closeButton",
    "titleClass",
    "messageClass",
    "tapToDismiss",
    "ToastrModule",
    "parentModule",
    "forRoot",
    "ngModule",
    "providers",
    "provide",
    "useValue",
    "NgModule",
    "imports",
    "CommonModule",
    "exports",
    "ToastNoAnimation",
    "appRef",
    "configurable",
    "setInterval",
    "ApplicationRef",
    "entryComponents"
  ],
  "mappings": "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"
}
